#! /bin/bash
# grep material defintions in dm-process-materials
function mgrep() {
    find ~/dm-process-materials -name "*.json" | xargs grep --color "$@"
}
# grep presets in dm-studio-resources/resources_src
function pgrep() {
    find ~/dm-studio-resources/resources_src -name "*.json" | xargs grep --color "$@"
}
# grep generated resources in dm-studio-resources/resources
function rgrep() {
    find ~/dm-studio-resources/resources -name "*.json" -o -name "*.cfg" -o -name "*.xml.fdm_material" | xargs grep --color "$@"
}
alias nv='nvim'
alias l='ls -lthr'
alias cdcuralog='cd "/Users/xchen/Library/Application Support/cura/master"'
alias clog='vi "/Users/xchen/Library/Application Support/cura/master/cura.log"'
alias cmaker='cmake -DCMAKE_BUILD_TYPE=Release'
alias cmaked='cmake -DCMAKE_BUILD_TYPE=Debug'
alias gxc='git branch -D dev-xchen; git checkout -b dev-xchen'
alias lstmp='ls -lcrtd /tmp/*'
alias cpdata='cd ${HOME}/dm-engine && cp -rf ${HOME}/dm-test/models/stls/* test/data'

function maked () 
{
    target=$1
    if [ -z $target ]; then
        target=$(ls -lthr | tail -1 | sed -e 's/^.*\s\+\(.*\)\.cpp$/\1/')
    fi
    CPPFLAGS="-g $CPPFLAGS" make VERBOSE=1 $target
}

function makeo () 
{
    target=$1
    if [ -z $target ]; then
        target=$(ls -lthr | tail -1 | sed -e 's/^.*\s\+\(.*\)\.cpp$/\1/')
    fi
    CPPFLAGS="-O2 $CPPFLAGS" make VERBOSE=1 $target
}

alias ssheg='ssh -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.61'
alias sshcura='ssh -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.16'
alias sshcura1='ssh -i ~/.ssh/xianming-bastion.pem  centos@10.150.68.45'
alias sshcura2='ssh -i ~/.ssh/xianming-bastion.pem  centos@10.150.68.59'
alias sshweb='ssh -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.52'

alias sftpeg='sftp -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.61'
alias sftpcura='sftp -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.16'
alias sftpweb='sftp -i ~/.ssh/xianming-bastion.pem  centos@10.150.69.52'

alias sshmacmini='ssh -i ~/.ssh/non-prod-east.pem jenkins@10.101.30.5' #DmJe2019!
alias sshmeteor7='ssh -i ~/.ssh/xianming-bastion.pem centos@10.150.66.52' #where dm-web is built
alias sshge='ssh -i ~/.ssh/xianming-bastion.pem centos@172.16.1.57' #node-dm-geometry-engine
alias sshlinux_docker='ssh -i ~/.ssh/xianming-bastion.pem ec2-user@10.150.65.4' #linux-docker
alias sshet='ssh -i ~/.ssh/xianming-bastion.pem ec2-user@172.16.1.231' # engine test

alias getmyge='curl https://nexus.desktopmetal.com/repository/apollo-development/dm-geometry-engine-osx/dev-xchen/dm-geometry-engine-osx_dev-xchen_darwin-x64_latest.tar.gz > dm-geometry-engine-osx_dev-xchen_darwin-x64_latest.tar.gz'
alias getmyce='curl https://nexus.desktopmetal.com/repository/apollo-development/dm-gcode-generator-osx/dev-xchen/dm-gcode-generator-osx_dev-xchen_darwin-x64_latest.tar.gz > dm-gcode-generator-osx_dev-xchen_darwin-x64_latest.tar.gz'
alias sshenginetest='ssh xchen@172.16.1.231'
alias sftenginetest='sftp xchen@172.16.1.231'
#alias cmkd='cd ${HOME}/dm-gcode-generator && tools/build_engine.sh -a --dynamic --debug --dev -DCMAKE_PREFIX_PATH="${HOME}/Virtualenvs/Python_3.8.10-PyQt_5.15"'
#alias cmkr='cd ${HOME}/dm-gcode-generator && tools/build_engine.sh -a --dynamic         --dev -DCMAKE_PREFIX_PATH="${HOME}/Virtualenvs/Python_3.8.10-PyQt_5.15"'

function fdefs() {
    find . -name "*.xml.fdm_material" -o -name "*.json" -o -name "*.cfg" | xargs grep "$@"
}

function gpip() {
   PIP_REQUIRE_VIRTUALENV="0" python -m pip "$@"
}

# File search functions
function f() { find . -iname "*$1*" ${@:2} 2>/dev/null }
function r() { grep "$1" ${@:2} -R 2>/dev/null }

# Create a folder and move into it in one command
function mkcd() { mkdir -p "$@" && cd "$_"; }

# (re)Create build folder and move into it
function mcb()
{
    if [[ $(basename `pwd`) = "build" ]]; then
        cd ..
        rm -rf build
    elif [[ -d build ]]; then
        rm -rf build
    fi
    mkcd build
}

# run Cura
function rcura()
{
    source ~/VirtualEnvs/Python_3.8.10-PyQt_5.15/bin/activate
    export PYTHONPATH=~/Uranium:${PYTHONPATH}
    cd ~/Cura
    python cura_app.py
}

alias cdaio='/Applications/FabricateAIO/FabricateAIO.app/Contents/MacOS'
alias getge='curl -R https://nexus.desktopmetal.com/repository/apollo-development/dm-geometry-engine-osx/integration/dm-geometry-engine-osx_integration_darwin-x64_latest.tar.gz > dm-geometry-engine-osx_integration_darwin-x64_latest.tar.gz'
alias getce='curl -RO https://nexus.desktopmetal.com/repository/apollo-development/dm-gcode-generator-osx/integration/dm-gcode-generator-osx_integration_darwin-x64_latest.tar.gz'
alias getwrapper='curl -R https://nexus.desktopmetal.com/repository/apollo-development/dm-wrapper/integration/dm-wrapper_integration_darwin-x64_latest.tar.gz > dm-wrapper_integration_darwin-x64_latest.tar.gz'

alias aioweb_resources='/Applications/FabricateAIO/FabricateAIO.app/Contents/Resources/app/node_modules/meteor-desktop-run-meteor/bundle/programs/server/assets/app'
alias aiocura_resources='/Applications/FabricateAIO/FabricateAIO.app/Contents/Resources/app/node_modules/dm-cura-web/bin/resources'
alias aioengine_resources='/Applications/FabricateAIO/FabricateAIO.app/Contents/Resources/app/node_modules/dm-wrapper/definitions'
alias cdstudio='/Applications/FabricateAIO/FabricateAIO.app/Contents/Resources/app/node_modules/dm-wrapper/bin/studio'
alias lsofl='lsof -i -n -P | grep -E "COMMAND|LISTEN"'
alias ss3='s3rver -d /tmp/s3rver_test_directory --configure-bucket dm-models-local .desktop/modules/fakes3/cors.xml --configure-bucket dm-images-local .desktop/modules/fakes3/cors.xml --allow-mismatched-signatures -a 0.0.0.0 -p 8083'
alias cppcompile='c++ -std=c++11 -stdlib=libc++'
alias g='git'

alias lsc='ls -lcrt ~/dm-engine/tmp/*_config*.json; ls -lcrtd /tmp/*_config*json'
alias vic='vi `ls -lcrt /tmp/*config.json | tail -1 | rev | cut -d " " -f 1 | rev`'
alias ge='engine/geometryEngine -c `ls -lcrt /tmp/*_config*.json | tail -1 | rev | cut -d " " -f 1 | rev`'
alias ge2='engine/geometryEngine -c `ls -lcrt ~/dm-engine/tmp/*_config*.json | tail -1 | rev | cut -d " " -f 1 | rev`'
alias lst='ls -lcrt /tmp/*.txt'
alias lst='ls -lcrt /tmp/*.txt'
alias lsp='ls -lcrt /tmp/*.proto'
alias lss='ls -lcrt /tmp/*.stl'
alias lsm='ls -lcrt /tmp/*.mesh'
alias lsg='ls -lcrt /tmp/*.gcode'
alias lsl='ls -lcrt /tmp/*layer*.json'

alias cds3='cd ${HOME}/fakes3_root/dm-models-qa/oxiet7af7JDBwum5S/'
alias cdw='cd ${HOME}/dm-web'
alias cde='cd ${HOME}/dm-engine'
alias cdv='cd ${HOME}/dm-gcode-viewer/gcode-viewer-bundle/packages/gcode-viewer-package'
alias cdg='cd ${HOME}/dm-geometry-engine/bin'
alias cdc='cd ${HOME}/dm-gcode-generator/bin'

alias cdf='cd ${HOME}/dm-fiber-slicer/build/cli'
alias cdm='cd ${HOME}/dm-composite'
alias cdq='pushd ${HOME}/.local/share/Desktop\ Metal/Fiber/current_data/'

alias mkmd='rm -rf CMakeCache.txt &&  cmake ../src -DCMAKE_BUILD_TYPE=Debug && make clean && make -j8'
alias mkmr='rm -rf CMakeCache.txt &&  cmake ../src -DCMAKE_BUILD_TYPE=elease && make clean && make -j8'
alias mkv='make VERBOSE=1'

alias tagf='cd ${HOME}/dm-fiber-slicer/build && ctags -R --languages=c++ --exclude=.git --exclude=build ..'
alias tags='cd ${HOME}/dm-shop && ctags -R --languages=c++ --exclude=.git --exclude=build .'
alias tagg='cd ${HOME}/dm-geometry-engine/build && ctags -R --languages=c++ --exclude=.git --exclude=build ..'
alias tagc='cdc && ctags -R --languages=c++ --exclude=.git --exclude=macos --exclude=build ../../'
alias tagp='ctags -R --fields=+l --languages=python --python-kinds=-iv'
alias tagj='ctags --options=${HOME}/ctags-patterns-for-javascript/ctagsrc -R --exclude=.idea --exclude=.testing --exclude=.meteor --exclude=.desktop --exclude=.vscode --exclude=.git --exclude=tmp --exclude=node_modules --exclude=test'

alias ntree='tree -I node_modules'
alias cptest='cp -f ${HOME}/dm-test/models/stls/* ${HOME}/dm-engine/test/data/'


alias gitd='git status | grep -v deleted | grep -v CMake'

alias decode_arcus_message='cp /tmp/cura_arcus_message ~/tmp && cd ~/tmp && protoc --decode=cura.proto.Slice Cura.proto < cura_arcus_message'

alias delete_non_slice_config_files='grep -L doSlice *_config.json  | xargs rm'
alias slice_config_files='grep -l doSlice *_config.json'
alias slice_config_uuids='all_slice_config_files | cut -d_ -f1'
alias slice_config_model_names='all_slice_config_files | xargs sed -n "s/.*modelName\": *\"\([0-9a-zA-Z_.]\{8\}\).*/\1/p"'
alias slicelog_slice_times='grep Diff generateSliceLog.txt | cut -d: -f2 | sed "s/^\s*//" | sed "s/\([.0-9]\{4\}\).*/\1/"'
alias slicelog_model_names='grep "Model Name" generateSliceLog.txt | cut -d: -f2 | sed "s/^\s*//" | sed "s/\([.0-9a-zA-Z_]\{8\}\).*/\1/"'

function  cpge ()
{
    if [[ ! -f ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/geometryEngine0 ]]; then
        cp ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/geometryEngine ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/geometryEngine0
    fi
    cp ${HOME}/dm-geometry-engine/bin/geometryEngine ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/geometryEngine
}

function cpce () 
{
    if [[ ! -f ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/CuraEngine0 ]]; then
        cp ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/CuraEngine ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/CuraEngine0
    fi
    cp ${HOME}/dm-gcode-generator/bin/CuraEngine ${HOME}/dm-geometry-engine/bin/
    cp ${HOME}/dm-gcode-generator/bin/CuraEngine ${HOME}/dm-engine/node_modules/dm-wrapper/bin/studio/CuraEngine
}
alias cpf='cp ${HOME}/dm-fiber-slicer/build/cli/fiber-slicer ${HOME}/dm-engine/node_modules/dm-wrapper/bin/make/fiber-slicer'

alias curadebug='cd ~/Cura; ./cura_app.py  --external-backend'
alias curaport='sudo lsof -i -P -n | grep LISTEN | grep python3'
alias ce='./CuraEngine read_params_from_file'

alias dusg='sudo du -BG  -a  | sort -n -r | head -n 8'

alias nodeeg='npm run dev:darwin:linux'
alias meteorweb='meteor --settings settings-dev-local-s3.json'

function fetchtag () { 
    if [[ "$#" -ne 2 ]]; then
        echo "Usage: fetchtag tag checkout_as_branch"
        return
    fi
    git fetch origin refs/tags/$1;
    git checkout -b $2
}

function cpscmd ()
{
    cdc
    sed "s/ --pipe 1//" /tmp/params_slice_command.txt > params.txt
    cp ~/dm-engine/tmp/`lsc | sed -n -e '3p' | cut -d\/ -f6 | cut -d\_ -f1`.stl '/Volumes/[C] Windows 10.hidden/Users/xchen/dm-engine/tmp'
    sed 's/\/Users\//C:\/Users\//g' params.txt > params_windows.txt
    cp params_windows.txt '/Volumes/[C] Windows 10.hidden/msys64/tmp/params.txt'
    cp params_windows.txt '/Volumes/[C] Windows 10.hidden/Users/xchen/AppData/Local/Temp/params.txt'
}

function cpgcmd ()
{
    cdc
    
    sed -e "s/-o \/Users\/xchen\/dm-engine\/tmp\/\([0-9a-zA-Z_-]*\)\.gcode -y/-o \/Users\/xchen\/dm-engine\/tmp\/\1.gcode -x \/Users\/xchen\/dm-engine\/tmp\/\1_slices.proto -u \/Users\/xchen\/dm-engine\/tmp\/\1_support_slices.proto/"  -e "s/-o \/tmp\/\([0-9a-zA-Z_-]*\)\.gcode -y/-o \/tmp\/\1.gcode -x \/tmp\/\1_slices.proto -u \/tmp\/\1_support_slices.proto/" /tmp/params_gcode_command_0.txt > params.txt

    #copy slice proto files
    cp `tail -1 params.txt | sed -e 's/^.*-x //; s/ -s .*$//; s/-u //'` '/Volumes/[C] Windows 10.hidden/Users/xchen/dm-engine/tmp'

    #path change to windows format
    sed 's/\/Users\//C:\/Users\//g' params.txt > params_windows.txt

    #copy final params.txt to both temp location of msys2 and windows cmd
    cp params_windows.txt '/Volumes/[C] Windows 10.hidden/msys64/tmp/params.txt'
    cp params_windows.txt '/Volumes/[C] Windows 10.hidden/Users/xchen/AppData/Local/Temp/params.txt'
}

function gs () { git status $* }
function psp () { ps -p $1 -wwo pid,vsz=MEMORY,user,group,args }

function rweb ()
{
    getrepo dm-web
    ./dm-fetch-dependencies.sh
    meteor npm install
    npm run dev
}

function rengine ()
{
    getrepo dm-engine
    npm install
    npm run dev
}

function rcuraweb
{
    getrepo dm-cura-web
    source ~/Virtualenvs/Python_3.8.10-PyQt_5.15/bin/activate
    ./dm-fetch-dependencies.sh
    python -m pip install -r ./requirements.txt
    python fab_settings.py
}

function gdf
{
    if [[ -z "$1" ]]; then
        git difftool
    else
        git difftool $1~ $1
    fi
}

function pid
{
    ps -C $1 -o pid h
}
function nameofpid
{
    ps -o comm=  -q $1 
}

function dmv0
{
    sed -i -e '/\[{"type".*$/\[{"type"/' ${HOME}/diffusion-mesh-viewer/viewer.html
}
function dmv
{
    sed -i -e "/\[{\"type\".*$/{r /tmp/diffusion_layers.txt" -e "d}" ${HOME}/diffusion-mesh-viewer/viewer.html
}
function dmv2
{
    sed -i -e "/\[{\"type\".*$/{r /tmp/slice_layers.txt" -e "d}" ${HOME}/diffusion-mesh-viewer/viewer.html
}

function extract_diffuse_length_test_result
{
    # extract information from generateSliceLog.txt
    slicelog_model_names > models1
    slicelog_slice_times > times1

    # order by model name
    paste models1 times1 | sort > model_times
    cut -d$'\t' model_times -f1 > Models
    cut -d$'\t'  model_times -f2 > Times

    # extract information from slicing configuration files
    slice_config_model_names > models2
    slice_config_uuids > uuids2

    # order by model name
    paste models2 uuids2 | sort > model_uuids
    cut -d$'\t'  model_uuids -f2 > uuids

    # extract info from model_meta jason files
    rm -rf DiffusionLengths EffectiveDiffusionLengths DebindTimes
    for uuid in `cat uuids`
    do
        grep diffusionLength ${uuid}_model_meta.json | cut -d: -f2 | sed 's/\([.0-9]\{8\}\).*,/\1/' >> DiffusionLengths
        grep effectiveDiffusionLength ${uuid}_model_meta.json | cut -d: -f2 | sed 's/\([.0-9]\{4\}\).*,/\1/' >> EffectiveDiffusionLengths
        grep debindTime ${uuid}_model_meta.json | cut -d: -f2 | sed 's/\([.0-9]\{6\}\).*,/\1/' >> DebindTimes
    done
}

function joincmp
{
    paste $1 $2  | sed 's/$/)/' | sed 's/\t/(/' 
}

function lstmp
{
    mins=5
    if [ "$1" ]; then
        mins=$1
    fi
    found_files=`find /tmp -maxdepth 1 -mmin -$(($mins)) | sed '/^\/tmp$/d'`
    if [ "$found_files" ]; then
        ls -lcrt $found_files
    fi
}

function fjsn()
{
    for f in $@
    do
        cat $f | python -m json.tool > ${f}__tmp__;
        mv ${f}__tmp__ $f;
    done
}

function fres()
{
    grep -n $1 `find ${HOME}/dm-cura-web/archive/resources -name "*.json"` 2>/dev/null
}

function vdef()
{
    vi +/$1 ${HOME}/dm-cura-web/resources/definitions/fdmprinter.def.json
}

function fdef()
{
    grep -n $1 ${HOME}/dm-cura-web/resources/definitions/*def.json 2>/dev/null
}
function fdef2()
{
    find . -name "*.cfg" -o -name "*.xml.fdm_material" -o -name "*.json" | xargs grep --color -n $1 2>/dev/null
}


function fdefe()
{
    grep -n $1 ${HOME}/dm-engine/node_modules/dm-wrapper/definitions/*def.json 2>/dev/null
}

function fdefc()
{
    grep -n $1 ${HOME}/dm-cura-web/archive/resources/definitions/*def.json 2>/dev/null
}


function fhtml()
{
    grep -n $1 `find  -name "*.html"` 2>/dev/null | grep -v \.meteor | grep -v node_modules | grep $1
}

function fjs()
{
    grep -n $1 `find  -name "*.js"` 2>/dev/null | grep -v \.meteor | grep -v node_modules | grep $1
}

function fweb()
{
    grep -n $1 `find ${HOME}/dm-web -name "*.js"` 2>/dev/null | grep -v \.meteor | grep -v node_modules | grep $1
}

function feng()
{
    grep -n $1 `find ${HOME}/dm-engine -name "*.js"` 2>/dev/null | grep -v node_modules | grep $1
}

function fgeo()
{
    grep -n $1 `find ${HOME}/dm-geometry-engine -name "*.cpp" -o -name "*.h"` 2>/dev/null | grep -v build | grep $1
}

function fmkc()
{
    grep -n $1 `find ${HOME}/dm-composite -name "*.cpp" -o -name "*.h"` 2>/dev/null | grep -v build | grep $1
}

function fgco()
{
    grep -n $1 `find ${HOME}/dm-gcode-generator -name "*.cpp" -o -name "*.h"` 2>/dev/null | grep -v build | grep $1
}

function dfm()
{
    pushd ${HOME}/Downloads/PS-8369/resources/materials 
    for f in *; do
        echo $f
        vimdiff $f ${HOME}/Downloads/integration/resources/materials/$f
    done
    popd
}


function md()
{
    [ ! -d ~/dm-composite/build ] && mkdir ~/dm-composite/build
    cd ~/dm-composite/build
    rm -rf CMakeCache.txt
    cmake ../src -DCMAKE_BUILD_TYPE=Debug
    make clean
    make
}

function mr()
{
    [ ! -d ~/dm-composite/build ] && mkdir ~/dm-composite/build
    cd ~/dm-composite/build
    rm -rf CMakeCache.txt
    cmake ../src -DCMAKE_BUILD_TYPE=Release
    make clean
    make
}

function getmake()
{
    brch="integration"
    if [ $1 ]; then
        brch=$1
    fi
    dir=dm-composite
    if [ $2 ]; then
        dir=$2
    fi
    echo getting $brch of dm-composite into directory $dir....
    cd
    rm -rf $dir
    git clone   --single-branch --branch $brch git@github.com:DesktopMetal/dm-composite.git $dir
    
    cd $dir
    git status

    mkdir build
    cd build
    cmake ../src -DCMAKE_BUILD_TYPE=Debug
    make

    cd cli
    find  ../../src -name "*.h" -o -name "*.cpp" | xargs ctags
    cp ${HOME}/dm-test/models/stls/25_valve_body.stl test.stl
}

function getrepo()
{
    brch="integration"
    if [ $2 ]; then
        brch=$2
    fi
    dir=$1
    if [ $3 ]; then
        dir=$3
    fi
    echo getting $brch of $1 into directory $dir....
    cd
    rm -rf $dir
    git clone --recurse-submodules --single-branch --branch $brch git@github.com:DesktopMetal/$1.git $dir
    
    cd $dir
    if [[ "$1" = "dm-composite" ]]; then
        sed -i -e 's/QTDIR=\"~\/Qt\/5.12.3/QTDIR=\"$HOME\/Qt\/5.15.2/' build-composite-qmake-macos
        cp ~/dm_composite_compile_commands.json compile_commands.json
    fi
    if [[ "$1" = "dm-shop" ]]; then
        cp ~/dm_shop_compile_commands.json compile_commands.json
    fi
    if [[ "$1" = "dm-geometry-engine" ]] || [[ "$1" = "dm-gcode-generator" ]]; then
        macos/build-dependencies.sh
    fi
    if [[ "$1" = "dm-web" ]] || [[ "$1" = "dm-engine" ]]; then
        asdf local nodejs 12.16.2
    fi
    git status
}

function update_cura_res()
{
    cp -rf ${HOME}/dm-gcode-generator/resources/ ${HOME}/dm-cura-web/archive
}

function update_web_res()
{
    pushd ${HOME}/dm-gcode-generator/resources/
    cp -rf definitions/* extruders/* materials/* qml/Settings/* quality/* ${HOME}/dm-web/private/
    popd
}

function update_engine_res()
{
    pushd ${HOME}/dm-gcode-generator/resources/
    cp -rf definitions/* extruders/* materials/* qml/Settings/* quality/* ${HOME}/dm-engine/node_modules/dm-wrapper/definitions/
    popd
}


#FabricateAIO license
# 8ZCqkY5tMCM8mWypN

#nexus third party repo login
#xianmingchen changeme

#aio win agent where windows engine nightly test runs
#10.150.64.45
#Administrator

#windows AIO temp folder
#config files at ~/AppData/Local/Temp/
#params.txt files at ~/AppData/Local/Temp/
#"C:\\Program Files\\Desktop Metal\\FabricateAIO\\app\\resources\\app\\app.asar\\node_modules\\dm-engine\\resources\\definitions\\dm_delta.def.json",

#mac os AIO temp folder
#config files at $TMPDIR
#params.txt at /tmp
#"/Applications/FabricateAIO/FabricateAIO.app/Contents/Resources/app/node_modules/dm-wrapper/definitions/dm_delta.def.json"


#but yeah, you'll create a SSH tunnel thru the bastion server to the omega engine ones, and then ssh over that tunnel with the 2nd key
function sshomega1()
{
    ssh -f -i ~/.ssh/xianming-bastion.pem ec2-user@10.150.64.18 -L 30054:10.150.132.4:22 -N
    ssh -i ~/.ssh/xianming-omega -p 30054 centos@localhost
}

#but yeah, you'll create a SSH tunnel thru the bastion server to the omega engine ones, and then ssh over that tunnel with the 2nd key
function sshomega2()
{
    ssh -f -i ~/.ssh/xianming-bastion.pem ec2-user@10.150.64.18 -L 30055:10.150.133.47:22 -N
    ssh -i ~/.ssh/xianming-omega -p 30055 centos@localhost
}

#otool -L bin/geometryEngine
#DM_CLOUD=http://localhost:8083 DM_WEB=http://localhost:3000 PORT=4570 AWS_ACCESS_KEY_ID=S3RVER AWS_SECRET_ACCESS_KEY=S3RVER node --inspect-brk node_server.js

#On FreeBSD or most Linux systems, you can pipe the output of diff through cat -v -e -t to show whitespace differences.
#diff file1 file2 | cat -vet
